import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import bot_token as bt

from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=bt.token)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(bot)

# –ù–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã
max_number = 28
balance_of_candies = 2021

button_hi = KeyboardButton('–ü—Ä–∏–≤–µ—Ç! üëã')

greet_kb = ReplyKeyboardMarkup()
greet_kb.add(button_hi)

button1 = KeyboardButton('1Ô∏è‚É£')
button2 = KeyboardButton('2Ô∏è‚É£')
button3 = KeyboardButton('3Ô∏è‚É£')

markup3 = ReplyKeyboardMarkup().add(
    button1).add(button2).add(button3)

markup4 = ReplyKeyboardMarkup().row(
    button1, button2, button3
)

markup5 = ReplyKeyboardMarkup().row(
    button1, button2, button3
).add(KeyboardButton('–°—Ä–µ–¥–Ω–∏–π —Ä—è–¥'))

button4 = KeyboardButton('4Ô∏è‚É£')
button5 = KeyboardButton('5Ô∏è‚É£')
button6 = KeyboardButton('6Ô∏è‚É£')
markup5.row(button4, button5)
markup5.insert(button6)


@dp.message_handler(commands=['start2'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=kb.greet_kb)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–≤–µ–¥–∏—Ç–µ: /help")


@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer("–ò–≥—Ä–∞: –ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç 2021 –∫–æ–Ω—Ñ–µ—Ç–∞. –ò–≥—Ä–∞—é—Ç —á–µ–ª–æ–≤–µ–∫ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä "
                         "–¥–µ–ª–∞—è —Ö–æ–¥ –¥—Ä—É–≥ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∞. –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∂–µ—Ä–µ–±—å—ë–≤–∫–æ–π. "
                         "–ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º 28 –∫–æ–Ω—Ñ–µ—Ç. –í—Å–µ –∫–æ–Ω—Ñ–µ—Ç—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ "
                         "–¥–æ—Å—Ç–∞—é—Ç—Å—è —Å–¥–µ–ª–∞–≤—à–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥.")





# @dp.message_handler(commands=["play"])
# async def cmd_play(message: types.Message):
#     global balance_of_candies
#     move = True





    # while balance_of_candies >= 0:
    # if move:

    # balance_of_candies -= int(message.text)
    # await bot.send_message(message.from_user.id, balance_of_candies)

    # await bot.send_message(message.from_user.id, balance_of_candies)


#         dp.message_handler(commands=["add"])
#         await message.answer("Test 1")
#
#         balance_of_candies-=100
# move, balance_of_candies = moving(player_name_3, move, balance_of_candies, player_color_1)
# else:
# move, balance_of_candies = strong_comp_player(balance_of_candies, move)
# await message.answer(balance_of_candies)
# balance_of_candies -= 28
# await message.answer(balance_of_candies)
# balance_of_candies -= 28


@dp.message_handler(commands=["test1"])
async def cmd_test2(message: types.Message):
    await message.reply("Test 1")


# @dp.message_handler()
# async def cmd_echo(message: types.Message):
#     await bot.send_message(message.from_user.id, message.text)


# def play():
#     global balance_of_candies
#     move = True
#     while balance_of_candies >= 0:
#         if move:
#             cmd_test_3()
#             balance_of_candies-=1000


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    # executor.start_polling(dp)
    asyncio.run(main())
